AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        SourceArn: arn:aws:ses:us-east-1:773788008578:identity/yanlin96.gong@gmail.com
      UsernameAttributes:
        - email
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      LambdaConfig:
        CustomMessage: !GetAtt OnCustomMessage.Arn
      AutoVerifiedAttributes:
        - email
  stackeryPool:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
  CreateNewUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateNewUser
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CreateNewUser
      CodeUri: src/CreateNewUser
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UserProfile
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
          TABLE_NAME: !Ref UserProfile
          TABLE_ARN: !GetAtt UserProfile.Arn
      Events:
        PublicApiPOSTSignUp:
          Type: Api
          Properties:
            Path: /SignUp
            Method: POST
            RestApiId: !Ref PublicApi
  UserProfile:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: firstName
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-UserProfile
      GlobalSecondaryIndexes:
        - IndexName: firstName-index
          KeySchema:
            - AttributeName: firstName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
  SignIn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SignIn
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: SignIn
      CodeUri: src/SignIn
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
          USER_POOL_CLIENT_ID: !Ref stackeryPool
      Events:
        PublicApiPOSTSignIn:
          Type: Api
          Properties:
            Path: /SignIn
            Method: POST
            RestApiId: !Ref PublicApi
  GetUserProfile:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetUserProfile
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetUserProfile
      CodeUri: src/GetUserProfile
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref UserProfile
      Events:
        ApiGETprofile:
          Type: Api
          Properties:
            Path: /profile
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          TABLE_NAME: !Ref UserProfile
          TABLE_ARN: !GetAtt UserProfile.Arn
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        Authorizers:
          DevTest:
            UserPoolArn: !GetAtt UserPool.Arn
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: Api
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /profile:
            get:
              security:
                - DevTest: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserProfile.Arn}/invocations
              responses: {}
      EndpointConfiguration: PRIVATE
      TracingEnabled: true
      Cors:
        AllowHeaders: '''Authorization,Content-Type'''
        AllowOrigin: '''*'''
  PublicApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: PublicApi
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /SignUp:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateNewUser.Arn}/invocations
              responses: {}
          /ConfirmSignUp:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmSignUp.Arn}/invocations
              responses: {}
          /SignIn:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignIn.Arn}/invocations
              responses: {}
          /ResendEmailActivation:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResendEmailActivation.Arn}/invocations
              responses: {}
          /ResetPassword:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResetPassword.Arn}/invocations
              responses: {}
          /ForgetPassword:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ForgetPassword.Arn}/invocations
              responses: {}
          /ChangePssword:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChangePassword.Arn}/invocations
              responses: {}
          /RefreshToken:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RefreshToken.Arn}/invocations
              responses: {}
          /CheckSession:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckSession.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowHeaders: '''Authorization,Content-Type'''
        AllowOrigin: '''*'''
  OnCustomMessage:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-OnCustomMessage
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: OnCustomMessage
      CodeUri: src/OnCustomMessage
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
  UserPoolToOnCustomMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt OnCustomMessage.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt UserPool.Arn
  ConfirmSignUp:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ConfirmSignUp
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: ConfirmSignUp
      CodeUri: src/ConfirmSignUp
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
      Events:
        PublicApiPOSTConfirmSignUp:
          Type: Api
          Properties:
            Path: /ConfirmSignUp
            Method: POST
            RestApiId: !Ref PublicApi
  ResendEmailActivation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ResendEmailActivation
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: ResendEmailActivation
      CodeUri: src/ResendEmailActivation
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
      Events:
        PublicApiPOSTResendEmailActivation:
          Type: Api
          Properties:
            Path: /ResendEmailActivation
            Method: POST
            RestApiId: !Ref PublicApi
  ResetPassword:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ResetPassword
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: ResetPassword
      CodeUri: src/ResetPassword
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Events:
        PublicApiPOSTResetPassword:
          Type: Api
          Properties:
            Path: /ResetPassword
            Method: POST
            RestApiId: !Ref PublicApi
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
  ForgetPassword:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ForgetPassword
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: ForgetPassword
      CodeUri: src/ForgetPassword
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Events:
        PublicApiPOSTForgetPassword:
          Type: Api
          Properties:
            Path: /ForgetPassword
            Method: POST
            RestApiId: !Ref PublicApi
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
  ChangePassword:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ChangePassword
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: ChangePassword
      CodeUri: src/ChangePassword
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UserProfile
      Events:
        PublicApiPOSTChangePssword:
          Type: Api
          Properties:
            Path: /ChangePssword
            Method: POST
            RestApiId: !Ref PublicApi
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
          TABLE_NAME: !Ref UserProfile
          TABLE_ARN: !GetAtt UserProfile.Arn
  RefreshToken:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RefreshToken
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: RefreshToken
      CodeUri: src/RefreshToken
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Events:
        PublicApiPOSTRefreshToken:
          Type: Api
          Properties:
            Path: /RefreshToken
            Method: POST
            RestApiId: !Ref PublicApi
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
  CheckSession:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CheckSession
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CheckSession
      CodeUri: src/CheckSession
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Events:
        PublicApiPOSTCheckSession:
          Type: Api
          Properties:
            Path: /CheckSession
            Method: POST
            RestApiId: !Ref PublicApi
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
  VirtualNetwork:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName}
            - ResourceName: VirtualNetwork
      EnableDnsHostnames: true
  VirtualNetworkPrivateSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 0
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1
            - ResourceName: VirtualNetwork
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPrivateSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 1
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2
            - ResourceName: VirtualNetwork
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPublicSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 2
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 1
            - ResourceName: VirtualNetwork
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPublicSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 3
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 2
            - ResourceName: VirtualNetwork
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPrivateSubnet1NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  VirtualNetworkPrivateSubnet1NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VirtualNetworkPrivateSubnet1NatGatewayEIP.AllocationId
      SubnetId: !Ref VirtualNetworkPublicSubnet1
  VirtualNetworkPrivateSubnet1RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1 Route Table
            - ResourceName: VirtualNetwork
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPrivateSubnet1NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VirtualNetworkPrivateSubnet1NatGateway
      RouteTableId: !Ref VirtualNetworkPrivateSubnet1RouteTable
  VirtualNetworkPrivateSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualNetworkPrivateSubnet1RouteTable
      SubnetId: !Ref VirtualNetworkPrivateSubnet1
  VirtualNetworkPrivateSubnet2NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  VirtualNetworkPrivateSubnet2NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VirtualNetworkPrivateSubnet2NatGatewayEIP.AllocationId
      SubnetId: !Ref VirtualNetworkPublicSubnet2
  VirtualNetworkPrivateSubnet2RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2 Route Table
            - ResourceName: VirtualNetwork
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPrivateSubnet2NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VirtualNetworkPrivateSubnet2NatGateway
      RouteTableId: !Ref VirtualNetworkPrivateSubnet2RouteTable
  VirtualNetworkPrivateSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualNetworkPrivateSubnet2RouteTable
      SubnetId: !Ref VirtualNetworkPrivateSubnet2
  VirtualNetworkPublicSubnetsInternetGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Internet Gateway
            - ResourceName: VirtualNetwork
  VirtualNetworkPublicSubnetsInternetGatewayAttachment:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VirtualNetworkPublicSubnetsInternetGateway
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPublicSubnetsRouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Route Table
            - ResourceName: VirtualNetwork
      VpcId: !Ref VirtualNetwork
  VirtualNetworkPublicSubnetsInternetGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VirtualNetworkPublicSubnetsInternetGateway
      RouteTableId: !Ref VirtualNetworkPublicSubnetsRouteTable
  VirtualNetworkPublicSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualNetworkPublicSubnetsRouteTable
      SubnetId: !Ref VirtualNetworkPublicSubnet1
  VirtualNetworkPublicSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VirtualNetworkPublicSubnetsRouteTable
      SubnetId: !Ref VirtualNetworkPublicSubnet2
  VirtualNetworkAPIGatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VirtualNetworkAPIGatewayEndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.execute-api
      SubnetIds:
        - !Ref VirtualNetworkPrivateSubnet1
        - !Ref VirtualNetworkPrivateSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref VirtualNetwork
  VirtualNetworkAPIGatewayEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private API Gateway Access
        - ResourceName: VirtualNetwork
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Access API Gateway From VPC
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref VirtualNetwork
  APItest:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: APItest
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /test:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${test.Arn}/invocations
              responses: {}
        x-amazon-apigateway-policy:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*
              Condition:
                StringEquals:
                  aws:SourceVpc: !Ref VirtualNetwork
          Version: 2012-10-17
      EndpointConfiguration: PRIVATE
      TracingEnabled: true
      Cors:
        AllowHeaders: '''Authorization,Content-Type'''
        AllowOrigin: '''*'''
  APISecond:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: APItest
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /test:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${test2.Arn}/invocations
              responses: {}
        x-amazon-apigateway-policy:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*
              Condition:
                StringEquals:
                  aws:SourceVpc: !Ref VirtualNetwork
          Version: 2012-10-17
      EndpointConfiguration: PRIVATE
      TracingEnabled: true
      Cors:
        AllowHeaders: '''Authorization,Content-Type'''
        AllowOrigin: '''*'''
  test:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-test
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: test
      CodeUri: src/Function
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Events:
        APItestGETtest:
          Type: Api
          Properties:
            Path: /test
            Method: GET
            RestApiId: !Ref APItest
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
          TABLE_ARN: !GetAtt Table.Arn
  Api2:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: Api2
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /user/sayHello:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${callPrivate.Arn}/invocations
              responses: {}
          /user/sayBye:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${sayBye.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  callPrivate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-callPrivate
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: callPrivate
      CodeUri: src/callPrivate
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Events:
        Api2POSTusersayHello:
          Type: Api
          Properties:
            Path: /user/sayHello
            Method: POST
            RestApiId: !Ref Api2
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-Table
  sayBye:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-sayBye
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: sayBye
      CodeUri: src/sayBye
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Events:
        Api2GETusersayBye:
          Type: Api
          Properties:
            Path: /user/sayBye
            Method: GET
            RestApiId: !Ref Api2
      Environment:
        Variables:
          API_URL: !Sub https://${APISecond}.execute-api.${AWS::Region}.amazonaws.com/${APISecond.Stage}
  test2:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-test2
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: test2
      CodeUri: src/test2
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VirtualNetwork.DefaultSecurityGroup
        SubnetIds:
          - !Ref VirtualNetworkPrivateSubnet1
          - !Ref VirtualNetworkPrivateSubnet2
      Events:
        APISecondGETtest:
          Type: Api
          Properties:
            Path: /test
            Method: GET
            RestApiId: !Ref APISecond
      Environment:
        Variables:
          API_URL: !Sub https://${APItest}.execute-api.${AWS::Region}.amazonaws.com/${APItest.Stage}
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)