AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        SourceArn: arn:aws:ses:us-east-1:773788008578:identity/yanlin96.gong@gmail.com
      UsernameAttributes:
        - email
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      LambdaConfig:
        CustomMessage: !GetAtt OnCustomMessage.Arn
      AutoVerifiedAttributes:
        - email
  stackeryPool:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
  CreateNewUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateNewUser
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CreateNewUser
      CodeUri: src/CreateNewUser
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UserProfile
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
          TABLE_NAME: !Ref UserProfile
          TABLE_ARN: !GetAtt UserProfile.Arn
      Events:
        PublicApiPOSTSignUp:
          Type: Api
          Properties:
            Path: /SignUp
            Method: POST
            RestApiId: !Ref PublicApi
  UserProfile:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: firstName
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-UserProfile
      GlobalSecondaryIndexes:
        - IndexName: "firstName-index"
          KeySchema:
            - AttributeName: "firstName"
              KeyType: HASH
          Projection:
            ProjectionType: ALL
  SignIn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SignIn
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: SignIn
      CodeUri: src/SignIn
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
          USER_POOL_CLIENT_ID: !Ref stackeryPool
      Events:
        PublicApiPOSTSignIn:
          Type: Api
          Properties:
            Path: /SignIn
            Method: POST
            RestApiId: !Ref PublicApi
  GetUserProfile:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetUserProfile
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetUserProfile
      CodeUri: src/GetUserProfile
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref UserProfile
      Events:
        ApiGETprofile:
          Type: Api
          Properties:
            Path: /profile
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          TABLE_NAME: !Ref UserProfile
          TABLE_ARN: !GetAtt UserProfile.Arn
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        Authorizers:
          DevTest:
            UserPoolArn: arn:aws:cognito-idp:ap-southeast-2:494658088998:userpool/ap-southeast-2_hwgmuboBJ
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: Api
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: "2.0"
        info: {}
        paths:
          /profile:
            get:
              security:
                - DevTest: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserProfile.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowHeaders: "'Authorization,Content-Type'"
        AllowOrigin: "'*'"
  PublicApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: PublicApi
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: "2.0"
        info: {}
        paths:
          /SignUp:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateNewUser.Arn}/invocations
              responses: {}
          /ConfirmSignUp:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmSignUp.Arn}/invocations
              responses: {}
          /SignIn:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignIn.Arn}/invocations
              responses: {}
          /ResendEmailActivation:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResendEmailActivation.Arn}/invocations
              responses: {}
          /ResetPassword:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResetPassword.Arn}/invocations
              responses: {}
          /ForgetPassword:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ForgetPassword.Arn}/invocations
              responses: {}
          /ChangePssword:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChangePassword.Arn}/invocations
              responses: {}
          /RefreshToken:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RefreshToken.Arn}/invocations
              responses: {}
          /CheckSession:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckSession.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowHeaders: "'Authorization,Content-Type'"
        AllowOrigin: "'*'"
  OnCustomMessage:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-OnCustomMessage
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: OnCustomMessage
      CodeUri: src/OnCustomMessage
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
  UserPoolToOnCustomMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt OnCustomMessage.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt UserPool.Arn
  ConfirmSignUp:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ConfirmSignUp
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: ConfirmSignUp
      CodeUri: src/ConfirmSignUp
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
      Events:
        PublicApiPOSTConfirmSignUp:
          Type: Api
          Properties:
            Path: /ConfirmSignUp
            Method: POST
            RestApiId: !Ref PublicApi
  ResendEmailActivation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ResendEmailActivation
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: ResendEmailActivation
      CodeUri: src/ResendEmailActivation
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
      Events:
        PublicApiPOSTResendEmailActivation:
          Type: Api
          Properties:
            Path: /ResendEmailActivation
            Method: POST
            RestApiId: !Ref PublicApi
  ResetPassword:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ResetPassword
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: ResetPassword
      CodeUri: src/ResetPassword
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Events:
        PublicApiPOSTResetPassword:
          Type: Api
          Properties:
            Path: /ResetPassword
            Method: POST
            RestApiId: !Ref PublicApi
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
  ForgetPassword:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ForgetPassword
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: ForgetPassword
      CodeUri: src/ForgetPassword
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Events:
        PublicApiPOSTForgetPassword:
          Type: Api
          Properties:
            Path: /ForgetPassword
            Method: POST
            RestApiId: !Ref PublicApi
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
  ChangePassword:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ChangePassword
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: ChangePassword
      CodeUri: src/ChangePassword
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UserProfile
      Events:
        PublicApiPOSTChangePssword:
          Type: Api
          Properties:
            Path: /ChangePssword
            Method: POST
            RestApiId: !Ref PublicApi
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
          TABLE_NAME: !Ref UserProfile
          TABLE_ARN: !GetAtt UserProfile.Arn
  RefreshToken:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RefreshToken
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: RefreshToken
      CodeUri: src/RefreshToken
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Events:
        PublicApiPOSTRefreshToken:
          Type: Api
          Properties:
            Path: /RefreshToken
            Method: POST
            RestApiId: !Ref PublicApi
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
  CheckSession:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CheckSession
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CheckSession
      CodeUri: src/CheckSession
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Events:
        PublicApiPOSTCheckSession:
          Type: Api
          Properties:
            Path: /CheckSession
            Method: POST
            RestApiId: !Ref PublicApi
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref stackeryPool
          USER_POOL_ID: !Ref UserPool
          USER_POOL_ARN: !GetAtt UserPool.Arn
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
